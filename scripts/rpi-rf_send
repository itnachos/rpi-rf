#!/usr/bin/env python3

import argparse
import signal
import sys
import logging

from rpi_rf import RFDevice

rfdevice = None

# pylint: disable=unused-argument
def exithandler(signal, frame):
    rfdevice.cleanup()
    sys.exit(0)

logging.basicConfig(level=logging.INFO, datefmt='%Y-%m-%d %H:%M:%S',
                    format='%(asctime)-15s - [%(levelname)s] %(module)s: %(message)s',)

parser = argparse.ArgumentParser(description='Sends a decimal code via a 433/315MHz GPIO device')
parser.add_argument('code', metavar='CODE', type=int,
                    help="Decimal code to send")
parser.add_argument('-g', dest='gpio', type=int, default=17,
                    help="GPIO pin (Default: 17)")
parser.add_argument('-p', dest='pulselength', type=int, default=1400,
                    help="Pulselength (Default: 350)")
parser.add_argument('-t', dest='protocol', type=int, default=4,
                    help="Protocol (Default: 1)")
parser.add_argument('-n', dest='numberToSend', type=int, default=1,
                    help="Number of times to send (Default: 1)")
args = parser.parse_args()

signal.signal(signal.SIGINT, exithandler)
rfdevice = RFDevice(args.gpio)
rfdevice.enable_tx()

if args.protocol:
    protocol = args.protocol
else:
    protocol = "default"
if args.pulselength:
    pulselength = args.pulselength
else:
    pulselength = "default"
for x in range(args.numberToSend):
    logging.info(str(args.code) +
             " [" + 
             " protocol: " + str(protocol) +
             ", pulselength: " + str(pulselength) +
             ", sending " + str(x + 1) + " of " + str(args.numberToSend) +
             "]")
    rfdevice.tx_code(args.code, args.protocol, args.pulselength)
rfdevice.cleanup()
